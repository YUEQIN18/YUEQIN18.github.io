import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-DI4bkZkG.js";const e={},p=t(`<h1 id="java-list自定义去重" tabindex="-1"><a class="header-anchor" href="#java-list自定义去重"><span>Java List自定义去重</span></a></h1><h2 id="需求" tabindex="-1"><a class="header-anchor" href="#需求"><span>需求</span></a></h2><p>工作中经常遇到这样的需求：需要对一个 List 去重，而且我们想自定义去重的规则。</p><p>去重这个需求让我们很容易想到 hashSet，那么想用 hashSet 去重一个对象则有必要重写 equals()和 hashCode()。这是因为 hashSet 的 add()方法调用了 hashMap 的 put()，而 put()是根据 key 的 hashcode 值（由 native 方法计算得到，再与该值的高 16 位进行异或运算得到最终的 hash 值）最终判断这个 &lt;key, value&gt; 要放的位置。</p><p>根据我们的需求，当两个对象的 3 个字段相同时就需要去重了，所以我们需要重写 equals()和 hashCode()来使用 hashSet 去重。</p><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h2><p>比如我们有 Expert 这一实体</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Expert</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> exName<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> gender<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> positionName<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> areaName<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> jobName<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> contactMobile<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> majorName<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> individualResume<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> majorNameZc<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> background<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> unitName<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们想根据专家姓名，专业和专业职称三个字段判断两个实体是否相等，那我们应该重写 equals 方法，因为不重写 equals 方法，执行 expert1.equals(expert2) 比较的就是两个对象的地址（即 expert1== expert2），肯定是不相等的</p><h2 id="重写-equals" tabindex="-1"><a class="header-anchor" href="#重写-equals"><span>重写 equals()</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">ExpertDatabaseInfoVo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ExpertDatabaseInfoVo</span> object <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ExpertDatabaseInfoVo</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">fieldEquals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>exName<span class="token punctuation">,</span> object<span class="token punctuation">.</span>exName<span class="token punctuation">)</span>
                <span class="token operator">&amp;&amp;</span> <span class="token function">fieldEquals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>majorName<span class="token punctuation">,</span> object<span class="token punctuation">.</span>majorName<span class="token punctuation">)</span>
                <span class="token operator">&amp;&amp;</span> <span class="token function">fieldEquals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>majorNameZc<span class="token punctuation">,</span> object<span class="token punctuation">.</span>majorNameZc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">fieldEquals</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span> <span class="token class-name">String</span> s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">!</span>s1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="重写-hashcode" tabindex="-1"><a class="header-anchor" href="#重写-hashcode"><span>重写 hashCode()</span></a></h2><p>当 equals 方法被重写时，通常有必要重写 hashCode 方法，以维护 hashCode 方法的常规协定，该协定声明相等对象必须具有相等的哈希码。那这又是为什么呢？也就是说，如果 expert1.equals(expert2) = true，那么<strong>在 hashMap 中这两个对象作为 key 时也应是相同的</strong>。而 hashMap 计算一个对象的 key 时会调用 hashCode()方法，因此我们需要重写 hashCode()方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span>exName <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> exName<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span>majorName <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> majorName<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span>majorNameZc <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> majorNameZc<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>为什么要使用 31？</strong> String 源码中也使用的 31，然后网上说有这两点原因：</p><ul><li><strong>原因一：更少的乘积结果冲突</strong> 31 是质子数中一个“不大不小”的存在，如果你使用的是一个如 2 的较小质数，那么得出的乘积会在一个很小的范围，很容易造成哈希值的冲突。而如果选择一个 100 以上的质数，得出的哈希值会超出 int 的最大范围，这两种都不合适。而如果对超过 50,000 个英文单词（由两个不同版本的 Unix 字典合并而成）进行 hash code 运算，并使用常数 31, 33, 37, 39 和 41 作为乘子，每个常数算出的哈希值冲突数都小于 7 个（国外大神做的测试），那么这几个数就被作为生成 hashCode 值得备选乘数了。 所以从 31,33,37,39 等中间选择了 31</li><li><strong>原因二：31 可以被 JVM 优化</strong> 位运算优化： 左移 &lt;&lt; : 左边的最高位丢弃，右边补全 0（把 &lt;&lt; 左边的数据*2 的移动次幂）。 右移 &gt;&gt; : 把 &gt;&gt; 左边的数据/2 的移动次幂。 无符号右移 &gt;&gt;&gt; : 无论最高位是 0 还是 1，左边补齐 0。 　　 所以 ： 31 * i = (i &lt;&lt; 5) - i，JVM 可以优化这个乘法，转化成位运算，提高运算效率</li></ul></blockquote><h2 id="去重" tabindex="-1"><a class="header-anchor" href="#去重"><span>去重</span></a></h2><p>对一个List去重，如果有两个entity重复了，我们希望保留year更大的那个。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Expert</span><span class="token punctuation">&gt;</span></span> expertList <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 使用hashMap做缓存</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Expert</span><span class="token punctuation">,</span> <span class="token class-name">Expert</span><span class="token punctuation">&gt;</span></span> expertMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Expert</span> info <span class="token operator">:</span> expertList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>expertMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Expert</span> pre <span class="token operator">=</span> expertMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 根据年份，替换成最新信息</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pre<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> info<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                expertMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            expertMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 遍历HashMap获取最新信息</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Expert</span><span class="token punctuation">&gt;</span></span> newExpertList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Expert</span><span class="token punctuation">,</span> <span class="token class-name">Expert</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> expertMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        newExpertList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),o=[p];function c(l,i){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","javaListDistinct.html.vue"]]),d=JSON.parse('{"path":"/posts/java/javaListDistinct.html","title":"Java List自定义去重","lang":"zh-CN","frontmatter":{"title":"Java List自定义去重","order":1,"author":"Roy","date":"2024-02-01T00:00:00.000Z","category":["Java"],"tag":["Java","笔记"],"sticky":false,"star":true,"copyright":"Copyright © 2024 Roy","description":"Java List自定义去重 需求 工作中经常遇到这样的需求：需要对一个 List 去重，而且我们想自定义去重的规则。 去重这个需求让我们很容易想到 hashSet，那么想用 hashSet 去重一个对象则有必要重写 equals()和 hashCode()。这是因为 hashSet 的 add()方法调用了 hashMap 的 put()，而 put...","head":[["meta",{"property":"og:url","content":"https://YUEQIN18.github.io/posts/java/javaListDistinct.html"}],["meta",{"property":"og:site_name","content":"Roy的博客"}],["meta",{"property":"og:title","content":"Java List自定义去重"}],["meta",{"property":"og:description","content":"Java List自定义去重 需求 工作中经常遇到这样的需求：需要对一个 List 去重，而且我们想自定义去重的规则。 去重这个需求让我们很容易想到 hashSet，那么想用 hashSet 去重一个对象则有必要重写 equals()和 hashCode()。这是因为 hashSet 的 add()方法调用了 hashMap 的 put()，而 put..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-31T10:27:11.000Z"}],["meta",{"property":"article:author","content":"Roy"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"笔记"}],["meta",{"property":"article:published_time","content":"2024-02-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-31T10:27:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java List自定义去重\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-31T10:27:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Roy\\"}]}"]]},"headers":[{"level":2,"title":"需求","slug":"需求","link":"#需求","children":[]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"重写 equals()","slug":"重写-equals","link":"#重写-equals","children":[]},{"level":2,"title":"重写 hashCode()","slug":"重写-hashcode","link":"#重写-hashcode","children":[]},{"level":2,"title":"去重","slug":"去重","link":"#去重","children":[]}],"git":{"createdTime":1717151231000,"updatedTime":1717151231000,"contributors":[{"name":"YUEQIN18","email":"qinyue12345@gmail.com","commits":1}]},"readingTime":{"minutes":3.31,"words":993},"filePathRelative":"posts/java/javaListDistinct.md","localizedDate":"2024年2月1日","excerpt":"\\n<h2>需求</h2>\\n<p>工作中经常遇到这样的需求：需要对一个 List 去重，而且我们想自定义去重的规则。</p>\\n<p>去重这个需求让我们很容易想到 hashSet，那么想用 hashSet 去重一个对象则有必要重写 equals()和 hashCode()。这是因为 hashSet 的 add()方法调用了 hashMap 的 put()，而 put()是根据 key 的 hashcode 值（由 native 方法计算得到，再与该值的高 16 位进行异或运算得到最终的 hash 值）最终判断这个 &lt;key, value&gt; 要放的位置。</p>\\n<p>根据我们的需求，当两个对象的 3 个字段相同时就需要去重了，所以我们需要重写 equals()和 hashCode()来使用 hashSet 去重。</p>","autoDesc":true}');export{k as comp,d as data};
