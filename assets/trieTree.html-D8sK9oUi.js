import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-DcTwY13m.js";const p={},e=t(`<h1 id="前缀树" tabindex="-1"><a class="header-anchor" href="#前缀树"><span>前缀树</span></a></h1><p>前缀树（Trie，字典树），是一种多叉树。</p><h2 id="从二叉树说起" tabindex="-1"><a class="header-anchor" href="#从二叉树说起"><span>从二叉树说起</span></a></h2><p>为了理解前缀树，我们先从「二叉树」说起。 常见的二叉树结构是下面这样的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>
    <span class="token class-name">TreeNode</span> left<span class="token punctuation">;</span>
    <span class="token class-name">TreeNode</span> right<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到一个树的节点包含了三个元素：该节点本身的值，左子树的指针，右子树的指针。</p><p>二叉树的每个节点只有两个孩子，那如果每个节点可以有多个孩子呢？ 这就形成了「多叉树」。多叉树的子节点数目一般不是固定的，所以会用变长数组来保存所有的子节点的指针。多叉树的结构是下面这样：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> children<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="前缀树的结构" tabindex="-1"><a class="header-anchor" href="#前缀树的结构"><span>前缀树的结构</span></a></h2><p>「前缀树」是一种特殊的多叉树，它的 TrieNode 中 chidren 是一个大小为 26 的一维数组（当输入只有小写字符），分别对应了26个英文字符 &#39;a&#39; ~ &#39;z&#39;，也就是说形成了一棵「26 叉树」。</p><p>前缀树的结构可以定义为下面这样：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Trie</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isWord<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Trie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>isWord <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Trie</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TrieNode 里面存储了两个信息：</p><ul><li>next 是该节点的所有子节点。</li><li>isWord 表示从根节点到当前节点为止，该路径是否形成了一个有效的字符串。</li></ul><h2 id="前缀树的查询" tabindex="-1"><a class="header-anchor" href="#前缀树的查询"><span>前缀树的查询</span></a></h2><p>在判断一个关键词是否在「前缀树」中时，需要依次遍历该关键词所有字符，在前缀树中找出这条路径。可能出现三种情况：</p><ul><li>在寻找路径的过程中，发现到某个位置路径断了。比如在上面的前缀树图中寻找 &quot;d&quot; 或者 &quot;ar&quot; 或者 &quot;any&quot; ，由于树中没有构建对应的节点，那么就查找不到这些关键词；</li><li>找到了这条路径，但是最后一个节点的 isWord 为 false。这也说明没有该关键词。比如在上面的前缀树图中寻找 &quot;a&quot; ；</li><li>找到了这条路径，并且最后一个节点的 isWord 为 true。这说明前缀树存储了这个关键词，比如上面前缀树图中的 &quot;am&quot; , &quot;cv&quot; 等。</li></ul><h2 id="前缀树的应用" tabindex="-1"><a class="header-anchor" href="#前缀树的应用"><span>前缀树的应用</span></a></h2><p>上面说了这么多前缀树，那前缀树有什么用呢？</p><p>比如我们常见的电话拨号键盘，当我们输入一些数字的时候，后面会自动提示以我们的输入数字为开头的所有号码。 比如我们的英文输入法，当我们输入半个单词的时候，输入法上面会自动联想和补全后面可能的单词。 再比如在搜索框搜索的时候，输入&quot;字节&quot;，后面会联想到&quot;跳动&quot;等等。</p><h2 id="_211-添加与搜索单词-数据结构设计" tabindex="-1"><a class="header-anchor" href="#_211-添加与搜索单词-数据结构设计"><span>211. 添加与搜索单词 - 数据结构设计</span></a></h2><p>本题是前缀树的变种： &#39;.&#39; 可以表示任何一个小写字符。</p><p>在搜索的过程中，如果遇到了 &#39;.&#39; ，则需要对当前节点的所有子树都进行遍历，只要有任何一个子树能最终匹配完成，那么就代表能匹配完成。</p><p>这里使用个dfs也就是深度优先遍历，关于dfs和bfs的选择问题，我认为当问题是要查找某个节点时，适合深度优先；当寻找最短路径时使用广度优先。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">WordDictionary</span> <span class="token punctuation">{</span>

        <span class="token keyword">private</span> <span class="token keyword">boolean</span> end<span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token class-name">WordDictionary</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token class-name">WordDictionary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WordDictionary</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addWord</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">||</span> word<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token class-name">WordDictionary</span> cur <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> word<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">[</span>c <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    cur<span class="token punctuation">.</span>next<span class="token punctuation">[</span>c <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WordDictionary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">[</span>c <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            cur<span class="token punctuation">.</span>end <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">||</span> word<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">WordDictionary</span> cur<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token keyword">return</span> cur<span class="token punctuation">.</span>end<span class="token punctuation">;</span>
            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 遍历所有可能</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">[</span>c <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">[</span>c <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","trieTree.html.vue"]]),d=JSON.parse('{"path":"/algorithm/trieTree.html","title":"前缀树问题","lang":"zh-CN","frontmatter":{"title":"前缀树问题","order":1,"author":"Roy","date":"2024-01-01T00:00:00.000Z","category":["算法"],"tag":["算法","LeetCode"],"sticky":false,"star":false,"copyright":"Copyright © 2024 Roy","description":"前缀树 前缀树（Trie，字典树），是一种多叉树。 从二叉树说起 为了理解前缀树，我们先从「二叉树」说起。 常见的二叉树结构是下面这样的： 可以看到一个树的节点包含了三个元素：该节点本身的值，左子树的指针，右子树的指针。 二叉树的每个节点只有两个孩子，那如果每个节点可以有多个孩子呢？ 这就形成了「多叉树」。多叉树的子节点数目一般不是固定的，所以会用变长...","head":[["meta",{"property":"og:url","content":"https://YUEQIN18.github.io/algorithm/trieTree.html"}],["meta",{"property":"og:site_name","content":"Roy的博客"}],["meta",{"property":"og:title","content":"前缀树问题"}],["meta",{"property":"og:description","content":"前缀树 前缀树（Trie，字典树），是一种多叉树。 从二叉树说起 为了理解前缀树，我们先从「二叉树」说起。 常见的二叉树结构是下面这样的： 可以看到一个树的节点包含了三个元素：该节点本身的值，左子树的指针，右子树的指针。 二叉树的每个节点只有两个孩子，那如果每个节点可以有多个孩子呢？ 这就形成了「多叉树」。多叉树的子节点数目一般不是固定的，所以会用变长..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-31T10:27:11.000Z"}],["meta",{"property":"article:author","content":"Roy"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:tag","content":"LeetCode"}],["meta",{"property":"article:published_time","content":"2024-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-31T10:27:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"前缀树问题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-31T10:27:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Roy\\"}]}"]]},"headers":[{"level":2,"title":"从二叉树说起","slug":"从二叉树说起","link":"#从二叉树说起","children":[]},{"level":2,"title":"前缀树的结构","slug":"前缀树的结构","link":"#前缀树的结构","children":[]},{"level":2,"title":"前缀树的查询","slug":"前缀树的查询","link":"#前缀树的查询","children":[]},{"level":2,"title":"前缀树的应用","slug":"前缀树的应用","link":"#前缀树的应用","children":[]},{"level":2,"title":"211. 添加与搜索单词 - 数据结构设计","slug":"_211-添加与搜索单词-数据结构设计","link":"#_211-添加与搜索单词-数据结构设计","children":[]}],"git":{"createdTime":1714466722000,"updatedTime":1717151231000,"contributors":[{"name":"YUEQIN18","email":"qinyue12345@gmail.com","commits":2}]},"readingTime":{"minutes":3.36,"words":1007},"filePathRelative":"algorithm/trieTree.md","localizedDate":"2024年1月1日","excerpt":"\\n<p>前缀树（Trie，字典树），是一种多叉树。</p>\\n<h2>从二叉树说起</h2>\\n<p>为了理解前缀树，我们先从「二叉树」说起。\\n常见的二叉树结构是下面这样的：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">TreeNode</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> val<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">TreeNode</span> left<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">TreeNode</span> right<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
